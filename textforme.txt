Least Recently Used (LRU) cache and used 2 data structures namely Doubly Linked List and Hash Map to implement it from scratch. Cache is a small amount of very fast and expensive memory which we get in our processors and RAMs. 
There are many ways to implement the algorithm. I have used:
1. a Doubly Linked List for Cache
2. a Hash Map for storing key and corresponding nodes
Consider a stream of integers approaching the cache memory. Let size of cache be 4, i.e, it can hold 4 integers.
When the cache is empty, it stores the first integer, say 1, also this is a Cache Miss or "Fault". The next integer is 2. 
Since it is not in cache it gets stored too. Next come 3 & 4 and those also get stored. 
Now the next integer coming is 5.
Now the new integer coming is 2. Now, we already have 2 in our Cache 
(A Cache Hit). This is the point where LRU cache has its core. 
We update the position of 2 to be the newest.
Now, if an integer 6 comes up, we would not delete 2, instead 3 gets 
removed since it was used the earliest.

The function "LRUCache" is the implementation or meat of our algorithm. it recieves the haspmap, key, pointer to pointer of head and end, and the 
size of cache. Firstly it checks whether we already have the key present, for this, it sees the hashmap. If the key is not present, it then checks 
if the cache has free space or full. If there is free space, it calls the "add_to_cache", else, it modifies thecache by adding the a new "dll" to the "head" of the cache 
and removes the last element of the cache. The new "end" is the last second element of the previous cache. Now, if the key is present, we modify the cache. The node that 
has this key is made the head and the adjacent two nodes are connected to each other. This way, the recently used key is updated so that, it doesn't 
get removed over a key which is less used. Note that we only remove nodes from the end of the cache as that is the least recently used node.
